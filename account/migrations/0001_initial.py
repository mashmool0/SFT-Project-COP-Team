# Generated by Django 5.1.4 on 2024-12-15 22:06

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.utils.timezone
import multiselectfield.db.fields
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('phone_number', models.CharField(max_length=11, unique=True, validators=[django.core.validators.RegexValidator(message='شماره موبایل باید با 09 شروع شده و 11 رقم باشد', regex='^09\\d{9}$')])),
                ('is_phone_verified', models.BooleanField(default=False)),
                ('first_name', models.CharField(max_length=30, verbose_name='نام')),
                ('last_name', models.CharField(max_length=30, verbose_name='نام خانوادگی')),
                ('field_of_study', models.CharField(blank=True, max_length=100, verbose_name='رشته تحصیلی')),
                ('degree', models.CharField(blank=True, choices=[('diploma', 'دیپلم'), ('bachelor', 'کارشناسی'), ('master', 'کارشناسی ارشد'), ('phd', 'دکتری')], max_length=20, verbose_name='مقطع تحصیلی')),
                ('city', models.CharField(blank=True, max_length=50, verbose_name='شهر محل سکونت')),
                ('interests', multiselectfield.db.fields.MultiSelectField(blank=True, choices=[('technology', 'تکنولوژی'), ('business', 'کسب و کار'), ('art', 'هنر'), ('science', 'علوم'), ('health', 'سلامت'), ('education', 'آموزش'), ('other', 'سایر')], max_length=100, verbose_name='علاقه\u200cمندی\u200cها')),
                ('other_interests', models.CharField(blank=True, max_length=200, verbose_name='سایر علاقه\u200cمندی\u200cها')),
                ('preferred_event_types', multiselectfield.db.fields.MultiSelectField(blank=True, choices=[('workshop', 'کارگاه'), ('seminar', 'سمینار'), ('conference', 'کنفرانس'), ('webinar', 'وبینار')], max_length=100, verbose_name='نوع رویدادهای مورد علاقه')),
                ('preferred_time_slots', multiselectfield.db.fields.MultiSelectField(blank=True, choices=[('morning', 'صبح'), ('afternoon', 'بعد از ظهر'), ('evening', 'عصر')], max_length=50, verbose_name='زمان\u200cهای ترجیحی')),
                ('max_event_price', models.PositiveIntegerField(blank=True, null=True, verbose_name='حداکثر هزینه قابل پرداخت برای رویداد')),
                ('is_profile_completed', models.BooleanField(default=False, verbose_name='تکمیل پروفایل')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'کاربر',
                'verbose_name_plural': 'کاربران',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
